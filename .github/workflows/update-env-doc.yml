name: Scan and Push Environment Variable Report

on:
  workflow_dispatch:
    inputs:
      SCAN_BRANCH:
        description: "Branch name to scan for environment variables"
        required: true
        default: "main"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Run Environment Variable Scanner
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          TARGET_USER_OR_ORG: kkaran13
          IS_ORG: "false"                       # set "true" for org, "false" for personal
          SCAN_BRANCH: ${{ github.event.inputs.SCAN_BRANCH }}
        run: |
          python <<'EOF'
          import os, re, requests, base64, logging

          logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

          token = os.getenv("GITHUB_TOKEN")
          target = os.getenv("TARGET_USER_OR_ORG")
          is_org = os.getenv("IS_ORG", "false").lower() == "true"
          scan_branch = os.getenv("SCAN_BRANCH", "dev")

          headers = {
              "Authorization": f"Bearer {token}",
              "Accept": "application/vnd.github.v3+json"
          }
          api = "https://api.github.com"

          # --- Get Repositories ---
          logging.info(f"Fetching repositories for {target}...")
          repos, page = [], 1
          while True:
              url = f"{api}/orgs/{target}/repos?per_page=100&page={page}" if is_org else f"{api}/user/repos?per_page=100&page={page}"
              r = requests.get(url, headers=headers)
              if r.status_code != 200:
                  logging.error(f"Failed to fetch repos: {r.status_code} {r.text}")
                  break
              data = r.json()
              if not data:
                  break
              repos.extend([repo["name"] for repo in data])
              page += 1
          logging.info(f"Found {len(repos)} repositories.")

          # --- Regex Patterns for Env Var Detection ---
          env_patterns = [
              r"os\.environ\.get\(['\"]([A-Za-z_][A-Za-z0-9_]*)['\"]\)",
              r"os\.getenv\(['\"]([A-Za-z_][A-Za-z0-9_]*)['\"]\)",
              r"process\.env\.([A-Za-z_][A-Za-z0-9_]*)",
              r"System\.getenv\(['\"]([A-Za-z_][A-Za-z0-9_]*)['\"]\)",
              r"\${([A-Za-z_][A-Za-z0-9_]*)}",
              r"^([A-Za-z_][A-Za-z0-9_]*)=.*$",
          ]

          def find_env_vars_in_text(text):
              envs = set()
              for pattern in env_patterns:
                  envs.update(re.findall(pattern, text, re.MULTILINE))
              return envs

          # --- Helper: get branches ---
          def get_branches(repo):
              r = requests.get(f"{api}/repos/{target}/{repo}/branches", headers=headers)
              if r.status_code != 200:
                  logging.warning(f"Failed to fetch branches for {repo}: {r.status_code}")
                  return []
              return [b["name"] for b in r.json()]

          # --- Helper: get repo tree ---
          def get_repo_tree(repo, branch):
              url = f"{api}/repos/{target}/{repo}/git/trees/{branch}?recursive=1"
              r = requests.get(url, headers=headers)
              if r.status_code != 200:
                  logging.warning(f"Failed to get file tree for {repo}:{branch}")
                  return []
              return [item["path"] for item in r.json().get("tree", []) if item["type"] == "blob"]

          # --- Helper: get file content ---
          def get_file_content(repo, path, branch):
              url = f"{api}/repos/{target}/{repo}/contents/{path}?ref={branch}"
              r = requests.get(url, headers=headers)
              if r.status_code != 200:
                  return ""
              data = r.json()
              if "content" in data:
                  return base64.b64decode(data["content"]).decode(errors="ignore")
              return ""

          # --- Helper: update file ---
          def update_file(repo, branch, filename, content):
              content_b64 = base64.b64encode(content.encode()).decode()
              url = f"{api}/repos/{target}/{repo}/contents/{filename}?ref={branch}"
              r = requests.get(url, headers=headers)
              sha = r.json().get("sha") if r.status_code == 200 else None

              data = {
                  "message": f"Update {filename} [Automated]",
                  "content": content_b64,
                  "branch": branch,
              }
              if sha:
                  data["sha"] = sha

              res = requests.put(url, headers=headers, json=data)
              if res.status_code in (200, 201):
                  logging.info(f"✅ {repo}:{branch} updated successfully.")
              else:
                  logging.error(f"❌ {repo}:{branch} update failed ({res.status_code}).")

          # --- Main Scan Loop ---
          for repo in repos:
              logging.info(f"🔍 Scanning {repo} [branch: {scan_branch}]...")
              branches = get_branches(repo)
              if scan_branch not in branches:
                  logging.warning(f"Repo {repo} has no branch '{scan_branch}'. Skipping.")
                  continue

              files = get_repo_tree(repo, scan_branch)
              env_vars = set()
              for path in files:
                  if any(path.endswith(ext) for ext in [".py", ".js", ".ts", ".java", ".env", ".go", ".sh", ".yaml", ".yml"]):
                      text = get_file_content(repo, path, scan_branch)
                      env_vars |= find_env_vars_in_text(text)

              if not env_vars:
                  logging.info(f"No env vars found in {repo}.")
                  continue

              # --- Generate Markdown ---
              report = f"# Environment Variables Used in {repo}\n\n"
              report += f"Scanned Branch: `{scan_branch}`\n\n"
              report += "## Detected Variables\n\n"
              for var in sorted(env_vars):
                  report += f"- `{var}`\n"
              report += "\n> Auto-generated by GitHub Actions.\n"

              # Push report to all branches
              for branch in branches:
                  update_file(repo, branch, "DEPLOYMENT_DOCUMENT.md", report)

          logging.info("🎯 Completed scanning all repositories.")
          EOF