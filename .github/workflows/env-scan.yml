name: Environment Variable Scanner

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: "Repository to scan (format: username/repo)"
        required: true
        default: "kkaran13/markdown-automation"
      target_branch:
        description: "Branch to scan"
        required: true
        default: "main"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # First checkout the current repository with our scripts
      - name: Checkout current repo with scripts
        uses: actions/checkout@v4
        
      # Then checkout the target repository to scan in a separate directory
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo }}
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.PERSONAL_TOKEN }}
          path: target_repo_to_scan

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests javalang

      - name: Run Environment Scanner
        env:
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          SCAN_DIR: ./target_repo_to_scan
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: python scripts/scan_envs.py

      - name: Push report to target repo branch
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
          FILENAME: DEPLOYMENT_DOCUMENT.md
        run: |
          python <<'EOF'
          import os, requests, base64, logging
          logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

          token = os.getenv("GITHUB_TOKEN")
          target_repo = os.getenv("TARGET_REPO")
          target_branch = os.getenv("TARGET_BRANCH")
          filename = os.getenv("FILENAME")
          
          # First check if we need to update the report
          # Read marker file that scan_envs.py would create if report was updated
          need_update = False
          try:
              with open("report_updated.txt", "r") as f:
                  status = f.read().strip()
                  if status == "updated":
                      need_update = True
                      logging.info("Report contains new variables, will update repository.")
                  else:
                      logging.info("No new variables found, skipping update.")
                      exit(0)
          except FileNotFoundError:
              # If no marker file exists, assume we need to update
              logging.info("No update marker found, will proceed with update.")
              need_update = True
              
          # Extract owner and repo name
          owner, repo_name = target_repo.split('/')
          
          headers = {"Authorization": f"Bearer {token}", "Accept": "application/vnd.github.v3+json"}
          api = "https://api.github.com"
          
          # Read the generated report
          try:
              with open(filename, "r", encoding="utf-8") as f:
                  content = f.read()
              content_b64 = base64.b64encode(content.encode("utf-8")).decode("utf-8")
          except Exception as e:
              logging.error(f"Failed to read report file: {e}")
              exit(1)

          # Update file in the target repository branch
          url = f"{api}/repos/{target_repo}/contents/{filename}?ref={target_branch}"
          
          # Check if file exists
          r = requests.get(url, headers=headers)
          sha = None
          if r.status_code == 200:
              sha = r.json().get("sha")
              if not need_update:
                  logging.info(f"File exists but no update needed, skipping.")
                  exit(0)
          elif r.status_code != 404:
              logging.error(f"Failed to check if file exists: {r.status_code} {r.text}")
              exit(1)
              
          # Prepare update data
          data = {
              "message": f"Update environment variables report [Automated]",
              "content": content_b64,
              "branch": target_branch
          }
          if sha:
              data["sha"] = sha
              
          # Update or create file
          res = requests.put(url, headers=headers, json=data)
          if res.status_code in (200, 201):
              logging.info(f"✅ Successfully updated {filename} in {target_repo}:{target_branch}")
          else:
              logging.error(f"❌ Failed to update {filename}: {res.status_code} {res.text}")
              exit(1)
          EOF
