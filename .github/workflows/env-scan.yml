name: Environment Variable Scanner

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: "Branch to scan"
        required: true
        default: "main"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests javalang

      - name: Run Environment Scanner
        env:
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
        run: python scripts/scan_envs.py

      - name: Push report to all repos
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          TARGET_USER_OR_ORG: kkaran13
          FILENAME: DEPLOYMENT_DOCUMENT.md
          IS_ORG: "false"
        run: |
          python <<'EOF'
          import os, requests, base64, logging
          logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

          token = os.getenv("GITHUB_TOKEN")
          target = os.getenv("TARGET_USER_OR_ORG")
          filename = os.getenv("FILENAME")
          is_org = os.getenv("IS_ORG", "false").lower() == "true"

          headers = {"Authorization": f"Bearer {token}", "Accept": "application/vnd.github.v3+json"}
          api = "https://api.github.com"
          content_b64 = base64.b64encode(open(filename).read().encode()).decode()

          repos = []
          page = 1
          while True:
              url = f"{api}/orgs/{target}/repos" if is_org else f"{api}/user/repos"
              r = requests.get(f"{url}?per_page=100&page={page}", headers=headers)
              data = r.json()
              if not data: break
              repos.extend([repo["name"] for repo in data])
              page += 1

          logging.info(f"Found {len(repos)} repos")

          def get_branches(repo):
              r = requests.get(f"{api}/repos/{target}/{repo}/branches", headers=headers)
              if r.status_code != 200: return []
              return [b["name"] for b in r.json()]

          def update_file(repo, branch):
              url = f"{api}/repos/{target}/{repo}/contents/{filename}?ref={branch}"
              r = requests.get(url, headers=headers)
              sha = r.json().get("sha") if r.status_code == 200 else None
              data = {"message": f"Update {filename} [Automated]", "content": content_b64, "branch": branch}
              if sha: data["sha"] = sha
              res = requests.put(url, headers=headers, json=data)
              if res.status_code in (200, 201):
                  logging.info(f"✅ {repo}:{branch} updated successfully")
              else:
                  logging.error(f"❌ {repo}:{branch} failed ({res.status_code})")

          for repo in repos:
              for branch in get_branches(repo):
                  update_file(repo, branch)
          EOF